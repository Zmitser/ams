buildscript {
    ext {
        kotlinVersion = '1.2.30'
        springBootVersion = '2.0.0.RC2'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
    }


}
plugins {
    id 'net.ltgt.apt' version '0.8'
    id "org.jetbrains.kotlin.kapt" version "1.2.30"
}


apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.platform.ots'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://dl.bintray.com/xsavikx/openweathermap-java-api" }
    maven { url  "https://dl.bintray.com/hotchemi/maven" }
}
configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-webflux")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-logging")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-actuator")
    compile("org.springframework.boot:spring-boot-loader-tools")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("io.dropwizard.metrics:metrics-core")
    compile("io.dropwizard.metrics:metrics-json")
    compile("io.dropwizard.metrics:metrics-jvm")
    compile("io.dropwizard.metrics:metrics-servlet")
    compile("io.dropwizard.metrics:metrics-servlets")
    compile("com.ryantenney.metrics:metrics-spring:3.1.3")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    compile("io.github.microutils:kotlin-logging:1.4.9")
    compile("io.github.benas:random-beans:3.7.0")
    compile("org.mapstruct:mapstruct-jdk8:1.2.0.Final")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("com.fasterxml.jackson.module:jackson-module-afterburner")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-hibernate5")
    compile("org.hibernate:hibernate-envers")
    compile("com.hazelcast:hazelcast")
    compile("com.hazelcast:hazelcast-hibernate52")
    compile("com.hazelcast:hazelcast-spring")
    compile("org.zalando:problem-spring-web:0.22.2")
    compile("p6spy:p6spy:3.0.0")
    kapt("org.mapstruct:mapstruct-processor:1.2.0.Final")
    compile("com.h2database:h2:1.4.196")
    compile("com.github.fedy2:yahoo-weather-java-api:2.0.2")
    compile 'org.openweathermap.java-api:api-core:1.0'
    compile group: 'tk.plogitech', name: 'darksky-forecast-api-jackson', version: '1.2.1'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile 'com.github.hotchemi:khronos:0.9.0'
    testCompile('io.projectreactor:reactor-test')
}
